# automatically generated by the FlatBuffers compiler, do not modify

# namespace: interface

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ModuleInterface(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModuleInterface()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModuleInterface(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ModuleInterface
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModuleInterface
    def Functions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from meillionen.interface.FunctionInterface import FunctionInterface
            obj = FunctionInterface()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModuleInterface
    def FunctionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModuleInterface
    def FunctionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ModuleInterface
    def Classes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from meillionen.interface.ClassInterface import ClassInterface
            obj = ClassInterface()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModuleInterface
    def ClassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModuleInterface
    def ClassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def ModuleInterfaceStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFunctions(builder, functions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(functions), 0)
def ModuleInterfaceAddFunctions(builder, functions):
    """This method is deprecated. Please switch to AddFunctions."""
    return AddFunctions(builder, functions)
def StartFunctionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModuleInterfaceStartFunctionsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFunctionsVector(builder, numElems)
def AddClasses(builder, classes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classes), 0)
def ModuleInterfaceAddClasses(builder, classes):
    """This method is deprecated. Please switch to AddClasses."""
    return AddClasses(builder, classes)
def StartClassesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModuleInterfaceStartClassesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartClassesVector(builder, numElems)
def End(builder): return builder.EndObject()
def ModuleInterfaceEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)